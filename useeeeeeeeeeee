import PyPDF2
import tabula as tb
# Importing the os library
import os

# Inbuilt function to remove files

import datetime
from datetime import date

today = date.today()
# print(today)
# prints 2022-11-26

try:
    filename = "immrecord"
    file = filename + ".pdf"
    table = tb.read_pdf(file, pages='all')
    file2 = filename + ".csv"
    csv_table = tb.convert_into(file, file2, pages="all")
except:
    print("made already")


def numOfDays(date1, date2):
    return (date2 - date1).days


def age(filename):
    file = filename + ".pdf"

    pdfFileObject = open(file, 'rb')

    pdfReader = PyPDF2.PdfFileReader(pdfFileObject)

    pageObject = pdfReader.getPage(0)

    text = pageObject.extractText()

    month1 = []
    day1 = []
    year1 = []

    for line in text.splitlines()[4:5]:
        field = line.split("/")
        month1.append(field[0])
        day1.append(field[1])
        year1.append(field[2])

    month = []

    for i in month1:
        for x in i:
            if x in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                month.append(x)

    day = []

    for i in day1:
        for x in i:
            if x in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                day.append(x)
    year = []
    for i in year1:
        for x in i:
            if x in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                year.append(x)

    year = year[0:4]
    monthstr = ""
    daystr = ""
    yearstr = ""
    for i in month:
        monthstr = monthstr + i
    for i in day:
        daystr = daystr + i
    for i in year:
        yearstr = yearstr + i

    intmonth = int(monthstr)
    intday = int(daystr)
    intyear = int(yearstr)

    date1 = date(intyear, intmonth, intday)
    date2 = today
    day = numOfDays(date1, date2)

    user_age = int(day / 366)
    return user_age


def appropriate_age(file):
    user_age = age(file)
    if user_age >= 19:
        return True
    else:
        print("You need to be 19 and up to use this code: ")
        print("Come back in", 19 - user_age, "year(s).")
        return False


file = open(filename + ".csv", "r")
resultsfile = open("results.txt", "w")

vaccine_name = []

vaccine_dose = []

vaccine_date = []

vaccine_dose_hepA = []
vaccine_dose_hepB = []
vaccine_dose_Hib = []
vaccine_date_Tdap = []
for line in file.readlines():
    field = line.split(",")
    vaccine_name.append(field[0])
    vaccine_dose.append(field[1])
    vaccine_date.append(field[2])
    vaccine_dose_hepA.append(field[3])
    vaccine_dose_hepB.append(field[2])
    vaccine_dose_Hib.append(field[2])
    vaccine_date_Tdap.append(field[3])



# Flu - 1 dose anually (COMPLETE)



resultsfile.write( "Influenza\n")
resultsfile.write(" \n")

position_flu = []
index = -1
for item in vaccine_name:
    index += 1
    # print(item,index)
    if "flu" in item:
        position_flu.append(index)

if len(position_flu) >= 1:
    max_flu = max(position_flu)

    most_recent_flu_date = vaccine_date[max_flu]
    # print(most_recent_flu_date)

    flu_date_fields = most_recent_flu_date.split("/")

    # print(flu_date_fields)

    new_int_list_flu = []

    for num in flu_date_fields:
        num = int(num)
        new_int_list_flu.append(num)

    # print(new_int_list_flu)

    flu_year = new_int_list_flu[2]
    flu_month = new_int_list_flu[0]
    flu_day = new_int_list_flu[1]

    flu_date = date(flu_year, flu_month, flu_day)
    # print(flu_date)
else:
    flu_date = 0

if age(filename) >= 19:
    if "Influenza" not in vaccine_name or flu_date == 0:  # we should go off the vax name used in the headers
        resultsfile.write("get flu vaccine. \n")
    elif numOfDays(flu_date, today) >= 365:
        resultsfile.write("get flu vaccine. \n")
    else:
        resultsfile.write("up to date on flu vax.\n")

# PNEUM COMPLETE
resultsfile.write(" \n")
resultsfile.write("Pneumococcal\n")
resultsfile.write(" \n")
position_pneum = []
pneum_index = -1
for item in vaccine_name:
    pneum_index += 1
    # print(item,index)
    if "PCV" or "PPSV" in item:
        position_pneum.append(pneum_index)

if len(position_pneum) >=1:

    max_pneum = max(position_pneum)

    most_recent_pneum_dose = vaccine_dose[max_pneum]
    most_recent_pneum_dose = int(most_recent_pneum_dose)
elif len(position_pneum) == 0:
    most_recent_penum_dose = 0



# Pneumococcal (PCV15, PCV20, PPSV23) COMPLETE (just make sure age function works correctly)
if age(filename) >= 65:
    if "Pneumococcal" not in vaccine_name:
        resultsfile.write("Adults 65 and up require two doses of the pneumococcal vaccine. Please consult with your physician. \n")
    elif most_recent_pneum_dose == 1:
        resultsfile.write("Adults 65 and up require two doses of the pneumococcal vaccine. Please consult with your physician. \n")
    elif most_recent_pneum_dose == 2:
        resultsfile.write("You are fully vaccinated with the pneumococcal vaccine. \n")

elif 19 <= age(filename) < 65:
    if "Pneumococcal" not in vaccine_name:
        resultsfile.write("Adults between the ages of 19 and 64 may qualify to receive the pneumococcal vaccine based on medical conditions or other risk factors. Please consult with your doctor, and for more information visit linktocdcwebsite. \n")

# Hepatitis A (HepA) COMPLETE
resultsfile.write(" \n")
resultsfile.write("Hepatitis A \n")
resultsfile.write(" \n")
position_hepA = []
hepA_index = -1
for item in vaccine_name:
    hepA_index +=1
    #print(item,index)
    if "Hep A" in item:
        position_hepA.append(hepA_index)
if len(position_hepA) >=1:

    max_hepA = max(position_hepA)

    most_recent_hepA_dose = vaccine_dose_hepA[max_hepA]
    most_recent_hepA_dose = int(most_recent_hepA_dose)
elif len(position_hepA) == 0:
    most_recent_hepA_dose = 0




if age(filename) >= 19:
    if ("Hep A" not in vaccine_name) or most_recent_hepA_dose == 1:
        resultsfile.write("It is recommended that adults have 2 or 3 doses of the HepA vaccine depending on the vaccine type. If you are 19 years or older, you may be eligible to receive this vaccine based on risk factors or other indiciations. Please consult with your physician. \n")
    elif most_recent_hepA_dose == 2:

        resultsfile.write("It is recommended that adults have 2 or 3 doses of the HepA vaccine depending on vaccine type and indication. If you have 2 doses, you may need a third. Please consult with your physician. \n")
    elif most_recent_hepA_dose == 3:
        resultsfile.write("You are fully vaccinated with the HepA vaccine. \n")

# Hepatitis B (HepB) COMPLETE
resultsfile.write(" \n")
resultsfile.write("Hepatitis B \n")
resultsfile.write(" \n")


position_hepB = []
hepB_index = -1

for item in vaccine_name:
    hepB_index += 1

    # print(item,index)
    if "Hep B" and "HepB" in item:

        position_hepB.append(item)
if len(position_hepB) >=1:

    max_hepB = max(position_hepB)

    most_recent_hepB_dose = vaccine_dose_hepB[max_hepB]
    most_recent_hepB_dose = int(most_recent_hepB_dose)
elif len(position_hepB) == 0:
    most_recent_hepB_dose = 0





if 19 <= age(filename) < 60:
    if ("Hep B" not in vaccine_name) or most_recent_hepB_dose == 1 or most_recent_hepB_dose == 2 or most_recent_hepB_dose == 3:
        resultsfile.write("The CDC recommends 2,3, or 4 doses of the HepB vaccine for adults under the age of 60 depending on vaccine or condition. Please consult with your physician to determine how many more doses you need to be considered fully vaccinated. \n")
    elif most_recent_hepB_dose == 4:
        resultsfile.write("You are fully vaccinated with the HepB vaccine.\n")

if age(filename) >= 60:
    resultsfile.write( "For adults over the age of 60, the CDC recommends the HepB vaccine for adults depending on the patient indication and the vaccine. Please consult with your physician to determine if you are eligible for the HepB vaccine and how many doses you need to be considered fully vaccinated.\n")

# Meningococcal A, C, W, Y (MCV4) COMPLETE

resultsfile.write(" \n")
resultsfile.write("Meningococcal A,C,W,Y\n")
resultsfile.write(" \n")
position_MCV4 = []
MCV4_index = -1
for item in vaccine_name:
    MCV4_index += 1
    # print(item,index)
    if "MCV4" in item:
        position_MCV4.append(MCV4_index)
if len(position_MCV4) >= 1:

    max_MCV4 = max(position_MCV4)

    most_recent_MCV4_dose = vaccine_dose[max_MCV4]
    most_recent_MCV4_dose = int(most_recent_MCV4_dose)
elif len(position_MCV4) == 0:
    most_recent_MCV4_dose = 0



if age(filename) >= 19:
    if most_recent_MCV4_dose == 2:
        resultsfile.write("You are fully vaccinated with the MenACWY vaccine.\n")
    elif ("Meningococcal" not in vaccine_name) or most_recent_MCV4_dose == 1:
        resultsfile.write("For adults 19 and older, the  CDC recommends 1 or 2 doses depending on indication. Please consult with your physician to determine if you are eligible to receive the MenACWY vaccine.\n")

# Meningococcal B (MenB) COMPLETE
resultsfile.write(" \n")
resultsfile.write("Meningococcal B \n")
resultsfile.write(" \n")
position_MenB = []
MenB_index = -1
for item in vaccine_name:
    MenB_index += 1
    # print(item,index)
    if "Meningococcal B" in item:
        position_MenB(MenB_index)
if len(position_MenB) >=1:
    max_MenB = max(position_MenB)

    most_recent_MenB_dose = int(vaccine_dose[max_MenB])
elif len(position_MenB) == 0:
    most_recent_MenB_dose = 0


if age(filename) >= 19:
    if ("Meningococcal B" not in vaccine_name) or most_recent_MenB_dose == 1 or most_recent_MenB_dose == 2:
        resultsfile.write("For adults 19 and older, the  CDC recommends 2 or 3 doses depending on indication. Please consult with your physician to determine if you are eligible to receive the MenB vaccine.\n")
    elif most_recent_MenB_dose == 3:
        resultsfile.write("You are fully vaccinated with the MenB vaccine.\n")

# Haemophilus influenzae type b (Hib) COMPLETE
resultsfile.write(" \n")
resultsfile.write("Haemophiliacs influenza \n")
resultsfile.write(" \n")

position_Hib = []
Hib_index = -1
for item in vaccine_name:
    Hib_index += 1
    # print(item,index)
    if "Hib" in item:
        position_Hib.append(Hib_index)

if len(position_Hib) >=1:
    max_Hib = max(position_Hib)

    most_recent_Hib_dose = int(vaccine_dose[max_Hib])
elif len(position_Hib) == 0:
    most_recent_Hib_dose = 0
